{"version":3,"sources":["components/Todolist/Todolist.module.css","reportWebVitals.ts","components/store/todoListReducer.ts","components/store/tasksReducer.ts","components/store/store.ts","components/Input/Input.tsx","components/EditableSpan/EditableSpan.tsx","components/Todolist/Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_TODOLIST","REMOVE_TODOLIST","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_TITLE","initialState","ADD_TASK","REMOVE_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","reducers","combineReducers","tasks","state","action","type","todoListID","id","title","isDone","filter","t","map","copyState","todoLists","store","createStore","window","Input","props","useState","Title","setTitle","error","setError","addTask","trim","callback","TextField","size","label","variant","value","onChange","event","currentTarget","onKeyPress","key","helperText","style","marginBottom","IconButton","onClick","aria-label","color","margin","AddBox","EditableSpan","editMode","setEditMode","onBlurHandler","changeTitle","width","autoFocus","onBlur","e","onDoubleClick","Todolist","className","s","removeTodoList","Delete","changeTodoListTitle","buttons","Button","changeTodoListFilter","task","doneTask","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","App","useSelector","dispatch","useDispatch","v1","addTaskAC","taskID","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","removeTodoListAC","changeTodoListFilterAC","changeTodoListTitleAC","getTasksForTodoList","tdl","tdlComponents","Grid","item","Paper","elevation","AppBar","position","Toolbar","Menu","Typography","Container","fixed","container","addTodoListAC","spacing","ReactDOM","render","StrictMode","AppWithRedux","document","getElementById"],"mappings":"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","file":"static/js/main.5a4581be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"doneTask\":\"Todolist_doneTask__3AjOy\",\"buttons\":\"Todolist_buttons__X86vo\",\"title\":\"Todolist_title__1dF2V\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { v1 } from \"uuid\";\nimport {FilterValuesType, TodoListType} from \"../../App\";\n\nexport const ADD_TODOLIST = 'ADD-TODOLIST'\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\n\nconst initialState: Array<TodoListType> = []\n\nexport const todoListReducer = (state = initialState, action: TodoListReducerActionType): Array<TodoListType> => {\n    switch (action.type) {\n        case ADD_TODOLIST:\n            return [...state, {id: action.todoListID, title: action.title, filter: \"all\"}]\n        case REMOVE_TODOLIST:\n            return state.filter(t => t.id !== action.todoListID)\n        case CHANGE_TODOLIST_FILTER:\n            return state.map(t => t.id === action.todoListID ? {...t, filter: action.filter} : t)\n        case CHANGE_TODOLIST_TITLE:\n            return state.map(t => t.id === action.todoListID ? {...t, title: action.title} : t)\n        default:\n            return state\n    }\n}\n\n//Action type\nexport type TodoListReducerActionType = AddTodoListAT | RemoveTodoListAT | ChangeTodoListFilterAT | ChangeTodoListTitleAT\n\n//AC\nexport type AddTodoListAT = {\n    type: typeof ADD_TODOLIST\n    title: string\n    todoListID: string\n}\nexport const addTodoListAC = (title: string): AddTodoListAT => ({ type: ADD_TODOLIST, title, todoListID: v1() })\n\nexport type RemoveTodoListAT = {\n    type: typeof REMOVE_TODOLIST\n    todoListID: string\n}\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListAT => ({ type: REMOVE_TODOLIST, todoListID })\n\nexport type ChangeTodoListFilterAT = {\n    type: typeof CHANGE_TODOLIST_FILTER\n    filter: FilterValuesType\n    todoListID: string\n}\nexport const changeTodoListFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodoListFilterAT => {\n    return {type: CHANGE_TODOLIST_FILTER, filter, todoListID}\n}\n\nexport type ChangeTodoListTitleAT = {\n    type: typeof CHANGE_TODOLIST_TITLE\n    title: string\n    todoListID: string\n}\nexport const changeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleAT => {\n    return {type: CHANGE_TODOLIST_TITLE, title, todoListID}\n}\n","import {TasksStateType} from \"../../App\";\nimport {v1} from \"uuid\";\nimport {AddTodoListAT, ADD_TODOLIST, REMOVE_TODOLIST, RemoveTodoListAT} from \"./todoListReducer\";\n\nexport const ADD_TASK = 'ADD-TASK'\nexport const REMOVE_TASK = 'REMOVE-TASK'\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\n    switch (action.type) {\n        case ADD_TASK:\n            return {\n                ...state,\n                [action.todoListID]: [\n                    {id: action.id, title: action.title, isDone: false},\n                    ...state[action.todoListID]\n                ]\n            }\n        case REMOVE_TASK:\n            return {\n                ...state, [action.todoListID]: state[action.todoListID]\n                    .filter(t => t.id !== action.id)\n            }\n        case CHANGE_TASK_STATUS:\n            return {\n                ...state, [action.todoListID]: state[action.todoListID]\n                    .map(t => t.id === action.id ? {...t, isDone: action.isDone} : t)\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state, [action.todoListID]: state[action.todoListID]\n                    .map(t => t.id === action.id ? {...t, title: action.title} : t)\n            }\n        case ADD_TODOLIST:\n            return {...state, [action.todoListID]: []}\n        case REMOVE_TODOLIST:\n            const copyState = {...state}\n            delete copyState[action.todoListID]\n            return copyState\n        default:\n            return state\n    }\n}\n\nexport type ActionType = AddTaskAT |\n    RemoveTaskAT |\n    ChangeTskStatusAT |\n    ChangeTskTitleAT |\n    AddTodoListAT |\n    RemoveTodoListAT\n//AC\nexport type AddTaskAT = {\n    type: typeof ADD_TASK\n    todoListID: string\n    id: string\n    title: string\n}\nexport const addTaskAC = (todoListID: string, title: string): AddTaskAT => ({\n    type: ADD_TASK,\n    todoListID,\n    id: v1(),\n    title\n})\n\nexport type RemoveTaskAT = {\n    type: typeof REMOVE_TASK\n    todoListID: string\n    id: string\n}\nexport const removeTaskAC = (todoListID: string, id: string): RemoveTaskAT => ({type: REMOVE_TASK, todoListID, id})\n\nexport type ChangeTskStatusAT = {\n    type: typeof CHANGE_TASK_STATUS\n    todoListID: string\n    id: string\n    isDone: boolean\n}\nexport const changeTaskStatusAC = (todoListID: string, id: string, isDone: boolean): ChangeTskStatusAT => ({\n    type: CHANGE_TASK_STATUS,\n    todoListID,\n    id,\n    isDone\n})\n\nexport type ChangeTskTitleAT = {\n    type: typeof CHANGE_TASK_TITLE\n    todoListID: string\n    id: string\n    title: string\n}\nexport const changeTaskTitleAC = (todoListID: string, id: string, title: string): ChangeTskTitleAT => ({\n    type: CHANGE_TASK_TITLE,\n    todoListID,\n    id,\n    title\n})\n\n","import {combineReducers, createStore } from \"redux\";\nimport {tasksReducer} from \"./tasksReducer\";\nimport {todoListReducer} from \"./todoListReducer\";\n\nexport const reducers = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer\n})\n\nexport const store = createStore(reducers)\n\nexport type AppStateType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store","import {IconButton, TextField} from \"@material-ui/core\";\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {AddBox} from \"@material-ui/icons\";\n\ntype InputPropsType = {\n    callback: (task: string) => void\n}\n\nexport const Input = (props: InputPropsType) => {\n\n    let [Title, setTitle] = useState('');\n    let [error, setError] = useState(false)\n\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value);\n        setError(false)\n    }\n    const addTask = () => {\n        if (Title.trim()) {\n            props.callback(Title.trim())\n            setTitle('')\n        } else {\n            setError(true)\n            setTitle('')\n        }\n    }\n    const onCtrlPress = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            addTask()\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                size={\"small\"}\n                id=\"standard-size-small\"\n                label=\"Title\"\n                variant=\"outlined\"\n                value={Title}\n                onChange={onChangeHandler}\n                onKeyPress={onCtrlPress}\n                error={error}\n                helperText={error && 'Title is required!'}\n                style={{marginBottom: \"10px\"}}/>\n\n            <IconButton\n                size={\"small\"}\n                onClick={addTask}\n                aria-label=\"delete\"\n                color={\"primary\"}\n                style={{margin: \"5px\"}}>\n                <AddBox />\n            </IconButton>\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState(props.title)\n\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onBlurHandler = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n\n    const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onBlurHandler()\n        }\n    }\n\n    return (\n        <>\n            {editMode ?\n                <TextField\n                    style={{width: \"150px\"}}\n                    size={\"small\"}\n                    id=\"standard-size-small\"\n                    label=\"Title\"\n                    autoFocus\n                    onBlur={onBlurHandler}\n                    value={title}\n                    onChange={onChangeHandler}\n                    onKeyPress={onEnter}/>\n                :\n                <span onDoubleClick={() => setEditMode(true)}>{props.title}</span>\n            }\n        </>\n    )\n}","import React from 'react';\r\nimport {FilterValuesType, TaskType} from '../../App';\r\nimport {Input} from \"../Input/Input\";\r\nimport s from './Todolist.module.css';\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    addTask: (task: string, todoListID: string) => void\r\n    changeTaskStatus: (isDone: boolean, id: string, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (title: string, id: string, todoListID: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n\r\n    return <div>\r\n        <div className={s.title}>\r\n            <IconButton aria-label=\"delete\" size={\"small\"} onClick={() => props.removeTodoList(props.id)}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <EditableSpan title={props.title} changeTitle={(title) => props.changeTodoListTitle(title, props.id)}/>\r\n        </div>\r\n\r\n        <div>\r\n            <Input callback={(title) => props.addTask(title, props.id)}/>\r\n        </div>\r\n\r\n        <div className={s.buttons}>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"all\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"all\" ? \"secondary\" : \"primary\"}>All</Button>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"active\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"active\" ? \"secondary\" : \"primary\"}>Active</Button>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"completed\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}>Completed</Button>\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map(task => {\r\n                    const removeTask = () => {\r\n                        props.removeTask(task.id, props.id)\r\n                    }\r\n                    const changeTaskStatus = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n                        props.changeTaskStatus(event.currentTarget.checked, task.id, props.id)\r\n                    return (\r\n                        <li className={task.isDone ? s.doneTask : ''} key={task.id}>\r\n                            <Checkbox checked={task.isDone}\r\n                                      onChange={changeTaskStatus}\r\n                                      size={\"small\"}\r\n                                      color=\"primary\"/>\r\n                            <EditableSpan title={task.title}\r\n                                          changeTitle={(title) => props.changeTaskTitle(title, task.id, props.id)}/>\r\n\r\n                            <IconButton aria-label=\"delete\" size={\"small\"} onClick={removeTask}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </li>\r\n                    )\r\n                }\r\n            )}\r\n        </ul>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Todolist} from './components/Todolist/Todolist';\nimport {Input} from \"./components/Input/Input\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./components/store/store\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./components/store/tasksReducer\";\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC,\n    removeTodoListAC\n} from \"./components/store/todoListReducer\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [id: string]: Array<TaskType>\n}\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    //useSelector\n    debugger\n    const todoLists = useSelector<AppStateType, Array<TodoListType>>(state => state.todoLists)\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks)\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //TASKS\n    const addTask = (title: string, todoListID: string) => {\n        dispatch(addTaskAC(todoListID, title))\n    }\n    const removeTask = (taskID: string, todoListID: string) => {\n        dispatch(removeTaskAC(todoListID, taskID))\n    }\n    const changeTaskStatus = (isDone: boolean, taskID: string, todoListID: string) => {\n        dispatch(changeTaskStatusAC(todoListID, taskID, isDone))\n    }\n    const changeTaskTitle = (title: string, taskID: string, todoListID: string) => {\n        dispatch(changeTaskTitleAC(todoListID, taskID, title))\n    }\n\n    //TODOLISTS\n    const addTodoList = (title: string) => {\n        dispatch(addTodoListAC(title))\n    }\n    const removeTodoList = (todoListID: string) => {\n        dispatch(removeTodoListAC(todoListID))\n    }\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\n        dispatch(changeTodoListFilterAC(filter, todoListID))\n    }\n    const changeTodoListTitle = (title: string, todoListID: string) => {\n        dispatch(changeTodoListTitleAC(title, todoListID))\n    }\n\n    const getTasksForTodoList = (tdl: TodoListType) => {\n        switch (tdl.filter) {\n            case 'active':\n                return tasks[tdl.id].filter(t => !t.isDone)\n            case 'completed':\n                return tasks[tdl.id].filter(t => t.isDone)\n            default:\n                return tasks[tdl.id]\n        }\n    }\ndebugger\n    const tdlComponents = todoLists.map(tdl =>\n        <Grid item key={tdl.id}>\n            <Paper elevation={5} className={\"tdl\"}>\n                <Todolist\n                    key={tdl.id}\n                    id={tdl.id}\n                    title={tdl.title}\n                    filter={tdl.filter}\n                    tasks={getTasksForTodoList(tdl)}\n                    removeTask={removeTask}\n                    addTask={addTask}\n                    changeTaskStatus={changeTaskStatus}\n                    changeTodoListFilter={changeTodoListFilter}\n                    removeTodoList={removeTodoList}\n                    changeTodoListTitle={changeTodoListTitle}\n                    changeTaskTitle={changeTaskTitle}/>\n            </Paper>\n        </Grid>\n        )\n\n    return (\n        <>\n            <AppBar position=\"static\">\n                <Toolbar className={\"appBar\"}>\n                    <IconButton color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button variant=\"outlined\" color={\"inherit\"}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container className={\"addTdlGrid\"}>\n                    <Input callback={addTodoList}/>\n                </Grid>\n                <Grid container spacing={5} className={\"tdlsGrid\"}>\n                    { tdlComponents }\n                </Grid>\n            </Container>\n        </>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport { store } from './components/store/store';\nimport App from './App';\nimport AppUseReducers from \"./AppUseReducers\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          {/*<App />*/}\n          {/*<AppUseReducers/>*/}\n          <AppWithRedux/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}