{"version":3,"sources":["components/Todolist/Todolist.module.css","components/Input/Input.tsx","components/EditableSpan/EditableSpan.tsx","components/Todolist/Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Input","props","useState","Title","setTitle","error","setError","addTask","trim","callback","TextField","size","id","label","variant","value","onChange","event","currentTarget","onKeyPress","key","helperText","style","marginBottom","IconButton","onClick","aria-label","color","margin","AddBox","EditableSpan","editMode","setEditMode","title","onBlurHandler","changeTitle","width","autoFocus","onBlur","e","onDoubleClick","Todolist","className","s","removeTodoList","Delete","changeTodoListTitle","buttons","Button","changeTodoListFilter","filter","tasks","map","task","isDone","doneTask","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","App","todoListID_1","v1","todoListID_2","todoLists","setTodoList","setTasks","todoListID","newTask","taskID","t","tdl","getTasksForTodoList","tdlComponents","Grid","item","Paper","elevation","AppBar","position","Toolbar","Menu","Typography","Container","fixed","container","newTodoList","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.409c6fb3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"doneTask\":\"Todolist_doneTask__3AjOy\",\"buttons\":\"Todolist_buttons__X86vo\",\"title\":\"Todolist_title__1dF2V\"};","import {IconButton, TextField} from \"@material-ui/core\";\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {AddBox} from \"@material-ui/icons\";\n\ntype InputPropsType = {\n    callback: (task: string) => void\n}\n\nexport const Input = (props: InputPropsType) => {\n\n    let [Title, setTitle] = useState('');\n    let [error, setError] = useState(false)\n\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value);\n        setError(false)\n    }\n    const addTask = () => {\n        if (Title.trim()) {\n            props.callback(Title.trim())\n            setTitle('')\n        } else {\n            setError(true)\n            setTitle('')\n        }\n    }\n    const onCtrlPress = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            addTask()\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                size={\"small\"}\n                id=\"standard-size-small\"\n                label=\"Title\"\n                variant=\"outlined\"\n                value={Title}\n                onChange={onChangeHandler}\n                onKeyPress={onCtrlPress}\n                error={error}\n                helperText={error && 'Title is required!'}\n                style={{marginBottom: \"10px\"}}/>\n\n            <IconButton\n                size={\"small\"}\n                onClick={addTask}\n                aria-label=\"delete\"\n                color={\"primary\"}\n                style={{margin: \"5px\"}}>\n                <AddBox />\n            </IconButton>\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState(props.title)\n\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onBlurHandler = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n\n    const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onBlurHandler()\n        }\n    }\n\n    return (\n        <>\n            {editMode ?\n                <TextField\n                    style={{width: \"150px\"}}\n                    size={\"small\"}\n                    id=\"standard-size-small\"\n                    label=\"Title\"\n                    autoFocus\n                    onBlur={onBlurHandler}\n                    value={title}\n                    onChange={onChangeHandler}\n                    onKeyPress={onEnter}/>\n                :\n                <span onDoubleClick={() => setEditMode(true)}>{props.title}</span>\n            }\n        </>\n    )\n}","import React from 'react';\r\nimport {FilterValuesType, TaskType} from '../../App';\r\nimport {Input} from \"../Input/Input\";\r\nimport s from './Todolist.module.css';\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    addTask: (task: string, todoListID: string) => void\r\n    changeTaskStatus: (isDone: boolean, id: string, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (title: string, id: string, todoListID: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    return <div>\r\n        <div className={s.title}>\r\n            <IconButton aria-label=\"delete\" size={\"small\"} onClick={() => props.removeTodoList(props.id)}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <EditableSpan title={props.title} changeTitle={(title) => props.changeTodoListTitle(title, props.id)}/>\r\n        </div>\r\n\r\n        <div>\r\n            <Input callback={(title) => props.addTask(title, props.id)}/>\r\n        </div>\r\n\r\n        <div className={s.buttons}>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"all\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"all\" ? \"secondary\" : \"primary\"}>All</Button>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"active\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"active\" ? \"secondary\" : \"primary\"}>Active</Button>\r\n            <Button\r\n                size={\"small\"}\r\n                onClick={() => props.changeTodoListFilter(\"completed\", props.id)}\r\n                variant={\"contained\"}\r\n                color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}>Completed</Button>\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map(task => {\r\n                    const removeTask = () => {\r\n                        props.removeTask(task.id, props.id)\r\n                    }\r\n                    const changeTaskStatus = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n                        props.changeTaskStatus(event.currentTarget.checked, task.id, props.id)\r\n                    return (\r\n                        <li className={task.isDone ? s.doneTask : ''} key={task.id}>\r\n                            <Checkbox checked={task.isDone}\r\n                                      onChange={changeTaskStatus}\r\n                                      size={\"small\"}\r\n                                      color=\"primary\"/>\r\n                            <EditableSpan title={task.title}\r\n                                          changeTitle={(title) => props.changeTaskTitle(title, task.id, props.id)}/>\r\n\r\n                            <IconButton aria-label=\"delete\" size={\"small\"} onClick={removeTask}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </li>\r\n                    )\r\n                }\r\n            )}\r\n        </ul>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Todolist} from './components/Todolist/Todolist';\nimport {v1} from 'uuid';\nimport {Input} from \"./components/Input/Input\";\nimport {AppBar, Button, Container, Grid, Icon, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [id: string]: Array<TaskType>\n}\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n\n    const todoListID_1 = v1()\n    const todoListID_2 = v1()\n\n    let [todoLists, setTodoList] = useState<TodoListType[]>([\n        {id: todoListID_1, title: 'What to learn?', filter: 'all'},\n        {id: todoListID_2, title: 'What to buy?', filter: 'all'},\n    ])\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID_1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false}\n        ],\n        [todoListID_2]: [\n            {id: v1(), title: \"Bear\", isDone: false},\n            {id: v1(), title: \"Milk\", isDone: false}\n        ]\n    })\n\n    const addTask = (task: string, todoListID: string) => {\n        const newTask = {id: v1(), title: task, isDone: false};\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\n        setTasks({...tasks});\n    }\n\n    const removeTask = (id: string, todoListID: string) => {\n        tasks[todoListID] = tasks[todoListID].filter(task => task.id !== id);\n        setTasks({...tasks});\n    }\n\n    const changeTaskStatus = (isDone: boolean, taskID: string, todoListID: string) => {\n        tasks[todoListID] = tasks[todoListID]\n            .map(t => t.id === taskID ? {...t, isDone} : t)\n        setTasks({...tasks})\n    }\n\n    const changeTaskTitle = (title: string, taskID: string, todoListID: string) => {\n        tasks[todoListID] = tasks[todoListID]\n            .map(t => t.id === taskID ? {...t, title} : t)\n        setTasks({...tasks})\n    }\n\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\n        todoLists = todoLists\n            .map(tdl => tdl.id === todoListID ? {...tdl, filter} : tdl)\n        setTodoList([...todoLists])\n    }\n\n    const addTodoList = (title: string) => {\n        const todoListID = v1()\n        const newTodoList = {id: todoListID, title: title, filter: 'all'} as TodoListType\n        setTodoList([...todoLists, newTodoList])\n        setTasks({...tasks, [todoListID]: []})\n    }\n\n    const removeTodoList = (todoListID: string) => {\n        todoLists = todoLists.filter(tdl => tdl.id !== todoListID)\n        setTodoList([...todoLists])\n        delete tasks[todoListID]\n    }\n\n    const changeTodoListTitle = (title: string, todoListID: string) => {\n        todoLists = todoLists.map(tdl => tdl.id === todoListID ? {...tdl, title} : tdl)\n        setTodoList([...todoLists])\n    }\n\n    const getTasksForTodoList = (tdl: TodoListType) => {\n        switch (tdl.filter) {\n            case 'active':\n                return tasks[tdl.id].filter(t => !t.isDone)\n            case 'completed':\n                return tasks[tdl.id].filter(t => t.isDone)\n            default:\n                return tasks[tdl.id]\n        }\n    }\n\n    const tdlComponents = todoLists.map(tdl =>\n        <Grid item key={tdl.id}>\n            <Paper elevation={5} className={\"tdl\"}>\n                <Todolist\n                    key={tdl.id}\n                    id={tdl.id}\n                    title={tdl.title}\n                    filter={tdl.filter}\n                    tasks={getTasksForTodoList(tdl)}\n                    removeTask={removeTask}\n                    addTask={addTask}\n                    changeTaskStatus={changeTaskStatus}\n                    changeTodoListFilter={changeTodoListFilter}\n                    removeTodoList={removeTodoList}\n                    changeTodoListTitle={changeTodoListTitle}\n                    changeTaskTitle={changeTaskTitle}/>\n            </Paper>\n        </Grid>\n        )\n\n    return (\n        <>\n            <AppBar position=\"static\">\n                <Toolbar className={\"appBar\"}>\n                    <IconButton color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button variant=\"outlined\" color={\"inherit\"}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container className={\"addTdlGrid\"}>\n                    <Input callback={addTodoList}/>\n                </Grid>\n                <Grid container spacing={5} className={\"tdlsGrid\"}>\n                    { tdlComponents }\n                </Grid>\n            </Container>\n        </>\n    )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}